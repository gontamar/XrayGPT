import argparse
import os
import random

import numpy as np
import torch
import torch.backends.cudnn as cudnn
import gradio as gr

from xraygpt.common.config import Config
from xraygpt.common.dist_utils import get_rank
from xraygpt.common.registry import registry
from xraygpt.conversation.conversation import Chat, CONV_VISION

# imports for registration
from xraygpt.datasets.builders import *
from xraygpt.models import *
from xraygpt.processors import *
from xraygpt.runners import *
from xraygpt.tasks import *


def parse_args():
    parser = argparse.ArgumentParser(description="Demo")
    parser.add_argument("--cfg-path", required=True, help="Path to configuration file.")
    parser.add_argument("--gpu-id", type=int, default=0, help="Specify the GPU to load the model.")
    parser.add_argument("--options", nargs="+", help="Override some settings in the config.")
    return parser.parse_args()


def setup_seeds(config):
    seed = config.run_cfg.seed + get_rank()
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    cudnn.benchmark = False
    cudnn.deterministic = True


# === Model Initialization ===
print('Initializing Chat')
args = parse_args()
cfg = Config(args)

model_config = cfg.model_cfg
model_config.device_8bit = args.gpu_id
model_cls = registry.get_model_class(model_config.arch)
model = model_cls.from_config(model_config).to(f'cuda:{args.gpu_id}')

vis_processor_cfg = cfg.datasets_cfg.openi.vis_processor.train
vis_processor = registry.get_processor_class(vis_processor_cfg.name).from_config(vis_processor_cfg)
chat = Chat(model, vis_processor, device=f'cuda:{args.gpu_id}')
print('Initialization Finished')


# === Gradio Components ===
def gradio_reset(chat_state, img_list):
    if chat_state is not None:
        chat_state.messages = []
    return None, None, gr.update(placeholder='Please upload your image first', interactive=False), \
           gr.update(value="Upload & Start Chat", interactive=True), chat_state, []


def upload_img(gr_img, text_input, chat_state):
    if gr_img is None:
        return None, None, gr.update(interactive=True), chat_state, None
    chat_state = CONV_VISION.copy()
    img_list = []
    llm_message = chat.upload_img(gr_img, chat_state, img_list)
    return gr.update(interactive=False), gr.update(interactive=True, placeholder='Type and press Enter'), \
           gr.update(value="Start Chatting", interactive=False), chat_state, img_list


def gradio_ask(user_message, chatbot, chat_state):
    if len(user_message.strip()) == 0:
        return gr.update(placeholder="Input should not be empty!"), chatbot, chat_state
    chat.ask(user_message, chat_state)
    chatbot = chatbot + [{"role": "user", "content": user_message}, {"role": "assistant", "content": "..."}]
    return '', chatbot, chat_state


def gradio_answer(chatbot, chat_state, img_list, num_beams, temperature):
    llm_message = chat.answer(
        conv=chat_state,
        img_list=img_list,
        num_beams=num_beams,
        temperature=temperature,
        max_new_tokens=300,
        max_length=2000,
    )[0]
    for msg in reversed(chatbot):
        if msg["role"] == "assistant":
            msg["content"] = llm_message
            break
    else:
        chatbot.append({"role": "assistant", "content": llm_message})
    return chatbot, chat_state, img_list


def set_example_xray(example):
    return example[0]


def set_example_text_input(example_text):
    return gr.update(value=example_text[0])


# === Interface Layout ===
title = "<h1 align='center'>Demo of LTTS XrayGPT</h1>"
description = "<h3>Upload your X-Ray images and start asking queries!</h3>"
disclaimer = """
<h1>Terms of Use:</h1>
<ul>
    <li>This service is intended for research and educational use. It does not replace professional medical advice.</li>
    <li>Results are generated by an AI system and may not be medically verified.</li>
    <li>Use responsibly. No warranties or guarantees are provided.</li>
</ul>
<hr>
<h3 align="center">Designed and Developed by LTTS</h3>
"""

with gr.Blocks() as demo:
    gr.Markdown(title)
    gr.Markdown(description)

    with gr.Row():
        with gr.Column(scale=1):
            image = gr.Image(type="pil")
            upload_button = gr.Button(value="Upload and Ask Queries", interactive=True, variant="primary")
            clear = gr.Button("Reset")

            num_beams = gr.Slider(1, 10, value=1, step=1, interactive=True, label="Beam Search Count")
            temperature = gr.Slider(0.1, 2.0, value=1.0, step=0.1, interactive=True, label="Temperature")

        with gr.Column():
            chat_state = gr.State()
            img_list = gr.State()
            chatbot = gr.Chatbot(label="XrayGPT", type="messages")
            text_input = gr.Textbox(label='User', placeholder='Please upload your X-Ray image.', interactive=False)

    with gr.Row():
        example_images = gr.Dataset(
            components=[image],
            samples=[
                [os.path.join("images/example_test_images", f"img{i}.png")] for i in range(1, 10)
            ],
            label="X-Ray Examples"
        )
        example_prompts = gr.Dataset(
            components=[gr.Textbox(visible=False)],
            samples=[
                ["Describe the given chest x-ray image in detail."],
                ["Take a look at this chest x-ray and describe the findings and impression."],
                ["Could you provide a detailed description of the given x-ray image?"],
                ["Describe the given chest x-ray image as detailed as possible."],
                ["What are the key findings in this chest x-ray image?"],
                ["Could you highlight any abnormalities or concerns in this chest x-ray image?"],
                ["What specific features of the lungs and heart are visible in this chest x-ray image?"],
                ["What is the most prominent feature visible in this chest x-ray image, and how is it indicative of the patient's health?"],
                ["Based on the findings in this chest x-ray image, what is the overall impression?"]
            ],
            label="Prompt Examples"
        )

    # Bind UI logic
    example_images.click(fn=set_example_xray, inputs=[example_images], outputs=[image])

    upload_button.click(upload_img, inputs=[image, text_input, chat_state],
                        outputs=[image, text_input, upload_button, chat_state, img_list])

    example_prompts.click(fn=set_example_text_input, inputs=[example_prompts], outputs=[text_input]).then(
        fn=gradio_ask, inputs=[text_input, chatbot, chat_state], outputs=[text_input, chatbot, chat_state]
    ).then(
        fn=gradio_answer, inputs=[chatbot, chat_state, img_list, num_beams, temperature],
        outputs=[chatbot, chat_state, img_list]
    )

    text_input.submit(fn=gradio_ask, inputs=[text_input, chatbot, chat_state],
                      outputs=[text_input, chatbot, chat_state]).then(
        fn=gradio_answer, inputs=[chatbot, chat_state, img_list, num_beams, temperature],
        outputs=[chatbot, chat_state, img_list]
    )

    clear.click(fn=gradio_reset, inputs=[chat_state, img_list],
                outputs=[image, text_input, chatbot, upload_button, chat_state, img_list])

    gr.Markdown(disclaimer)

# Launch the demo
demo.launch(share=True, debug=True)
